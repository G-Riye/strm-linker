name: Docker Build and Push

# 触发条件
on:
  # 当推送到 main 分支时触发
  push:
    branches: [ main ]
  # 当创建版本标签时触发（如 v1.0.0）
  push:
    tags: [ 'v*' ]
  # 手动触发
  workflow_dispatch:

env:
  # DockerHub 镜像名称（请修改为你的 DockerHub 用户名）
  IMAGE_NAME: yourdockerhubusername/strm-linker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. 设置 Docker Buildx（支持多平台构建）
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # 3. 登录到 DockerHub
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 4. 提取元数据（标签、标识）
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          # 对于分支推送，使用分支名
          type=ref,event=branch
          # 对于标签推送，使用标签名
          type=ref,event=tag
          # 对于 main 分支，添加 latest 标签
          type=raw,value=latest,enable={{is_default_branch}}
          # 对于版本标签，提取版本号
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    # 5. 构建并推送 Docker 镜像
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # 6. 输出镜像信息
    - name: Image digest
      run: echo "镜像已构建并推送：${{ steps.meta.outputs.tags }}"

  # 可选：运行测试作业
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Run Python tests
      run: |
        cd backend
        # 基本语法检查
        python -m py_compile main.py
        python -c "from main import app; print('✅ FastAPI app loads successfully')"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Test frontend build
      run: |
        if [ -f "frontend/dist/index.html" ]; then
          echo "✅ Frontend build successful"
        else
          echo "❌ Frontend build failed"
          exit 1
        fi

  # 安全扫描（可选）
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
